using System.Xml;
using System.Drawing;
using System.Windows.Forms;
using Grasshopper.Kernel.Types;
using Grasshopper.Kernel.Special;
using GH_IO.Serialization;
using MessageBox = Eto.Forms.MessageBox;
using Eto.Forms;

namespace Robots.Grasshopper;

public class LibraryParam : GH_ValueList
{
    // static 

    internal static bool IsConnected(GH_Component component, out LibraryParam libraryParam)
    {
        var sources = component.Params.First().Sources;
        libraryParam = sources.OfType<LibraryParam>().FirstOrDefault();
        return libraryParam is not null;
    }

    internal static bool CreateIfEmpty(GH_Document document, GH_Component component, ElementType type, string? selected = null)
    {
        var inputParam = component.Params.First();

        if (inputParam.SourceCount > 0)
            return false;

        var libraryParam = new LibraryParam
        {
            _type = type
        };

        if (selected is not null)
        {
            var selectedItem = new GH_ValueListItem(selected, $"\"{selected}\"")
            {
                Selected = true
            };

            libraryParam.ListItems.Add(selectedItem);
        }

        libraryParam.Update();
        var pivot = component.Attributes.Pivot;
        libraryParam.Attributes.Pivot = new PointF(pivot.X - 240, pivot.Y - 21);
        document.AddObject(libraryParam, false);
        inputParam.AddSource(libraryParam);
        return true;
    }

    public LibraryParam() : base()
    {
        CreateAttributes();
        ListItems.Clear();
    }

    // instance

    ElementType _type;
    public override string Name => "Robots library";
    public override string Description
    {
        get => "List generated by a load robot system or tool component. Refresh this component to update the list.";
        set => base.Description = value;
    }
    public override Guid ComponentGuid => new("{5DD377EC-F6AF-43F8-8E92-FC6669013E61}");
    public override GH_Exposure Exposure => GH_Exposure.hidden;

    public override void AppendAdditionalMenuItems(ToolStripDropDown menu)
    {
        menu.Items.Clear();
        Menu_AppendItem(menu, "Refresh", (s, e) => UpdateAndExpire(), Util.GetIcon("iconRobotParam"));
        Menu_AppendSeparator(menu);
    }

    public override void AddedToDocument(GH_Document document)
    {
        base.AddedToDocument(document);
        Update();
    }

    public override bool Write(GH_IWriter writer)
    {
        writer.SetInt32("Type", (int)_type);
        return base.Write(writer);
    }

    public override bool Read(GH_IReader reader)
    {
        _type = (ElementType)reader.GetInt32("Type");
        return base.Read(reader);
    }

    internal void UpdateAndExpire()
    {
        Update();
        ExpireSolution(true);
    }

    void Update()
    {
        var selected = (SelectedItems.FirstOrDefault()?.Value as GH_String)?.Value;

        List<string> list;
        try
        {
            list = FileIO.List(_type);
        }
        catch (Exception e)
        {
            var message = e is XmlException ex
                ? $"Invalid XML format in \"{Path.GetFileName(ex.SourceUri)}\""
                : e.Message;

            MessageBox.Show($"Error loading the Robot library\n\n{message}", MessageBoxType.Error);
            list = new List<string>(1);
        }

        if (list.SequenceEqual(ListItems.Select(i => ((GH_String)i.Value).Value)))
            return;

        ListItems.Clear();

        int selectedIndex = 0;

        if (selected is not null)
        {
            selectedIndex = list.FindIndex(n => n.Equals(selected, StringComparison.OrdinalIgnoreCase));

            if (selectedIndex == -1)
            {
                ListItems.Add(new GH_ValueListItem($"{selected} (missing)", $"\"{selected}\""));
                selectedIndex = 0;
            }
        }

        foreach (string name in list)
            ListItems.Add(new GH_ValueListItem(name, $"\"{name}\""));

        ListItems[selectedIndex].Selected = true;
    }
}
